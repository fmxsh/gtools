#!/bin/bash

set -e

# Ensure a commit message was provided
if [ -z "$1" ]; then
	echo "Usage: $0 \"commit message\""
	exit 1
fi

COMMIT_MSG="$1"

# Ensure we're inside a Git repo
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
	echo "‚ùå Error: This is not a Git repository."
	exit 1
fi

BRANCH=$(git branch --show-current)
REMOTE_URL=$(git remote get-url origin 2>/dev/null)

if [[ "$REMOTE_URL" =~ git@([^:]+):([^/]+)/([^/]+)(\.git)?$ ]]; then
	SSH_ALIAS="${BASH_REMATCH[1]}"
	ACCOUNT="${BASH_REMATCH[2]}"
	REPO="${BASH_REMATCH[3]}"
	REPO_SLUG="$ACCOUNT/$REPO"
elif [[ "$REMOTE_URL" =~ https://([^/]+)/([^/]+)/([^/]+)(\.git)?$ ]]; then
	SSH_ALIAS="${BASH_REMATCH[1]}"
	ACCOUNT="${BASH_REMATCH[2]}"
	REPO="${BASH_REMATCH[3]}"
	REPO_SLUG="$ACCOUNT/$REPO"
else
	echo "‚ùå Could not extract repo info from remote URL: $REMOTE_URL"
	exit 1
fi

# Determine expected SSH alias for user
case "$ACCOUNT" in
fmxsh)
	EXPECTED_SSH_ALIAS="github.com-fmxsh"
	;;
mtkld)
	EXPECTED_SSH_ALIAS="github.com-mtkld"
	;;
*)
	echo "‚ùå Unknown GitHub user: $ACCOUNT"
	exit 1
	;;
esac

# Fix remote URL if SSH alias is incorrect
if [ "$SSH_ALIAS" != "$EXPECTED_SSH_ALIAS" ]; then
	echo "üîß Fixing remote SSH alias: $SSH_ALIAS ‚Üí $EXPECTED_SSH_ALIAS"
	NEW_URL="git@$EXPECTED_SSH_ALIAS:$ACCOUNT/$REPO.git"
	git remote set-url origin "$NEW_URL"
	REMOTE_URL="$NEW_URL"
fi

# Print context
echo "üì§ Pushing as: $ACCOUNT via SSH host: $EXPECTED_SSH_ALIAS"
echo "üì¶ Repo: $REPO_SLUG"
echo "üåø Branch: $BRANCH"

# Show staged changes
git status --short

# Stage, commit, push
git add .
git commit -m "$COMMIT_MSG" || echo "‚ö†Ô∏è  Nothing to commit"
git push origin "$BRANCH"

echo "‚úÖ '$COMMIT_MSG' pushed to '$REPO_SLUG:$BRANCH' via $EXPECTED_SSH_ALIAS"
